diff --git a/node_modules/react-native-google-places-autocomplete/GooglePlacesAutocomplete.js b/node_modules/react-native-google-places-autocomplete/GooglePlacesAutocomplete.js
index 99a2a13..b338486 100644
--- a/node_modules/react-native-google-places-autocomplete/GooglePlacesAutocomplete.js
+++ b/node_modules/react-native-google-places-autocomplete/GooglePlacesAutocomplete.js
@@ -13,12 +13,10 @@ import React, {
 } from 'react';
 import {
   ActivityIndicator,
-  FlatList,
   Image,
   Keyboard,
   Platform,
   Pressable,
-  ScrollView,
   StyleSheet,
   Text,
   TextInput,
@@ -74,6 +72,10 @@ export const GooglePlacesAutocomplete = forwardRef((props, ref) => {
   let _results = [];
   let _requests = [];
 
+  const onTimeoutFunc = () => console.warn('google places autocomplete: request timeout');
+  const onTimeout = props.onTimeout ?? onTimeoutFunc;
+  const timeout = props.timeout ?? 20000;
+
   const hasNavigator = () => {
     if (navigator?.geolocation) {
       return true;
@@ -91,15 +93,21 @@ export const GooglePlacesAutocomplete = forwardRef((props, ref) => {
       const shouldDisplayPredefinedPlaces = text
         ? results.length === 0 && text.length === 0
         : results.length === 0;
-      if (
-        shouldDisplayPredefinedPlaces ||
+
+      const isPredefinedPlaceVisible =
+        props.predefinedPlacesAlwaysVisible &&
         props.predefinedPlacesAlwaysVisible === true
-      ) {
-        res = [
-          ...props.predefinedPlaces.filter(
-            (place) => place?.description.length,
-          ),
-        ];
+          ? true
+          : false;
+
+      if (shouldDisplayPredefinedPlaces || isPredefinedPlaceVisible) {
+        res = props.predefinedPlaces
+          ? [
+              ...props.predefinedPlaces.filter(
+                place => place?.description.length,
+              ),
+            ]
+          : [];
 
         if (props.currentLocation === true && hasNavigator()) {
           res.unshift({
@@ -109,7 +117,7 @@ export const GooglePlacesAutocomplete = forwardRef((props, ref) => {
         }
       }
 
-      res = res.map((place) => ({
+      res = res.map(place => ({
         ...place,
         isPredefinedPlace: true,
       }));
@@ -124,7 +132,7 @@ export const GooglePlacesAutocomplete = forwardRef((props, ref) => {
     ],
   );
 
-  const getRequestUrl = useCallback((requestUrl) => {
+  const getRequestUrl = useCallback(requestUrl => {
     if (requestUrl) {
       if (requestUrl.useOnPlatform === 'all') {
         return requestUrl.url;
@@ -140,12 +148,12 @@ export const GooglePlacesAutocomplete = forwardRef((props, ref) => {
     }
   }, []);
 
-  const getRequestHeaders = (requestUrl) => {
+  const getRequestHeaders = requestUrl => {
     return requestUrl?.headers || {};
   };
 
   const setRequestHeaders = (request, headers) => {
-    Object.keys(headers).map((headerKey) =>
+    Object.keys(headers).map(headerKey =>
       request.setRequestHeader(headerKey, headers[headerKey]),
     );
   };
@@ -179,7 +187,7 @@ export const GooglePlacesAutocomplete = forwardRef((props, ref) => {
   }, [buildRowsFromResults, props.predefinedPlaces]);
 
   useImperativeHandle(ref, () => ({
-    setAddressText: (address) => {
+    setAddressText: address => {
       setStateText(address);
     },
     getAddressText: () => stateText,
@@ -194,7 +202,7 @@ export const GooglePlacesAutocomplete = forwardRef((props, ref) => {
     url === 'https://maps.googleapis.com/maps/api';
 
   const _abortRequests = () => {
-    _requests.map((i) => {
+    _requests.map(i => {
       i.onreadystatechange = null;
       i.abort();
     });
@@ -231,7 +239,7 @@ export const GooglePlacesAutocomplete = forwardRef((props, ref) => {
 
     getCurrentPosition &&
       getCurrentPosition(
-        (position) => {
+        position => {
           if (props.nearbyPlacesAPI === 'None') {
             let currentLocation = {
               description: props.currentLocationLabel,
@@ -249,7 +257,7 @@ export const GooglePlacesAutocomplete = forwardRef((props, ref) => {
             _requestNearby(position.coords.latitude, position.coords.longitude);
           }
         },
-        (error) => {
+        error => {
           _disableRowLoaders();
           console.error(error.message);
         },
@@ -257,7 +265,7 @@ export const GooglePlacesAutocomplete = forwardRef((props, ref) => {
       );
   };
 
-  const _onPress = (rowData) => {
+  const _onPress = rowData => {
     if (rowData.isPredefinedPlace !== true && props.fetchDetails === true) {
       if (rowData.isLoading === true) {
         // already requesting
@@ -274,8 +282,10 @@ export const GooglePlacesAutocomplete = forwardRef((props, ref) => {
       // fetch details
       const request = new XMLHttpRequest();
       _requests.push(request);
-      request.timeout = props.timeout;
-      request.ontimeout = props.onTimeout;
+      const onTimeout = () => console.warn('google places autocomplete: request timeout');
+      request.timeout = props.timeout ?? 20000;
+      request.ontimeout = props.onTimeout ?? onTimeout
+
       request.onreadystatechange = () => {
         if (request.readyState !== 4) return;
 
@@ -357,7 +367,7 @@ export const GooglePlacesAutocomplete = forwardRef((props, ref) => {
     }
   };
 
-  const _enableRowLoader = (rowData) => {
+  const _enableRowLoader = rowData => {
     let rows = buildRowsFromResults(_results);
     for (let i = 0; i < rows.length; i++) {
       if (
@@ -384,7 +394,7 @@ export const GooglePlacesAutocomplete = forwardRef((props, ref) => {
     // }
   };
 
-  const _getPredefinedPlace = (rowData) => {
+  const _getPredefinedPlace = rowData => {
     if (rowData.isPredefinedPlace !== true) {
       return rowData;
     }
@@ -505,16 +515,26 @@ export const GooglePlacesAutocomplete = forwardRef((props, ref) => {
     }
   };
 
-  const _request = (text) => {
+  const _request = text => {
     _abortRequests();
     if (!url) {
       return;
     }
-    if (supportedPlatform() && text && text.length >= props.minLength) {
+
+    const isSearchTerm = text
+      ? props.minLength && text.length >= props.minLength
+        ? true
+        : text.length >= 0
+      : false
+
+    console.log(isSearchTerm)
+
+    if (supportedPlatform() && isSearchTerm ) {
       const request = new XMLHttpRequest();
       _requests.push(request);
-      request.timeout = props.timeout;
-      request.ontimeout = props.onTimeout;
+  
+      request.timeout = timeout ;
+      request.ontimeout = onTimeout;
       request.onreadystatechange = () => {
         if (request.readyState !== 4) {
           setListLoaderDisplayed(true);
@@ -575,17 +595,17 @@ export const GooglePlacesAutocomplete = forwardRef((props, ref) => {
   };
 
   // eslint-disable-next-line react-hooks/exhaustive-deps
-  const debounceData = useMemo(() => debounce(_request, props.debounce), [
-    props.query,
-    url,
-  ]);
+  const debounceData = useMemo(
+    () => debounce(_request, props.debounce),
+    [props.query, url],
+  );
 
-  const _onChangeText = (text) => {
+  const _onChangeText = text => {
     setStateText(text);
     debounceData(text);
   };
 
-  const _handleChangeText = (text) => {
+  const _handleChangeText = text => {
     _onChangeText(text);
 
     const onChangeText = props?.textInputProps?.onChangeText;
@@ -596,7 +616,7 @@ export const GooglePlacesAutocomplete = forwardRef((props, ref) => {
   };
 
   const _getRowLoader = () => {
-    return <ActivityIndicator animating={true} size='small' />;
+    return <ActivityIndicator animating={true} size="small" />;
   };
 
   const _renderRowData = (rowData, index) => {
@@ -613,14 +633,13 @@ export const GooglePlacesAutocomplete = forwardRef((props, ref) => {
             ? props.styles.predefinedPlacesDescription
             : {},
         ]}
-        numberOfLines={props.numberOfLines}
-      >
+        numberOfLines={props.numberOfLines}>
         {_renderDescription(rowData)}
       </Text>
     );
   };
 
-  const _renderDescription = (rowData) => {
+  const _renderDescription = rowData => {
     if (props.renderDescription) {
       return props.renderDescription(rowData);
     }
@@ -628,15 +647,14 @@ export const GooglePlacesAutocomplete = forwardRef((props, ref) => {
     return rowData.description || rowData.formatted_address || rowData.name;
   };
 
-  const _renderLoader = (rowData) => {
+  const _renderLoader = rowData => {
     if (rowData.isLoading === true) {
       return (
         <View
           style={[
             props.suppressDefaultStyles ? {} : defaultStyles.loader,
             props.styles.loader,
-          ]}
-        >
+          ]}>
           {_getRowLoader()}
         </View>
       );
@@ -645,19 +663,11 @@ export const GooglePlacesAutocomplete = forwardRef((props, ref) => {
     return null;
   };
 
-  const _renderRow = (rowData = {}, index) => {
-    return (
-      <ScrollView
-        contentContainerStyle={
-          props.isRowScrollable ? { minWidth: '100%' } : { width: '100%' }
-        }
-        scrollEnabled={props.isRowScrollable}
-        keyboardShouldPersistTaps={props.keyboardShouldPersistTaps}
-        horizontal={true}
-        showsHorizontalScrollIndicator={false}
-        showsVerticalScrollIndicator={false}
-      >
+  const _renderRow = useCallback(
+    (rowData = {}, index) => {
+      return (
         <Pressable
+          key={Math.random().toString(36)}
           style={({ hovered, pressed }) => [
             props.isRowScrollable ? { minWidth: '100%' } : { width: '100%' },
             {
@@ -669,22 +679,21 @@ export const GooglePlacesAutocomplete = forwardRef((props, ref) => {
             },
           ]}
           onPress={() => _onPress(rowData)}
-          onBlur={_onBlur}
-        >
+          onBlur={_onBlur}>
           <View
             style={[
               props.suppressDefaultStyles ? {} : defaultStyles.row,
               props.styles.row,
               rowData.isPredefinedPlace ? props.styles.specialItemRow : {},
-            ]}
-          >
+            ]}>
             {_renderLoader(rowData)}
             {_renderRowData(rowData, index)}
           </View>
         </Pressable>
-      </ScrollView>
-    );
-  };
+      );
+    },
+    [props],
+  );
 
   const _renderSeparator = (sectionID, rowID) => {
     if (rowID === dataSource.length - 1) {
@@ -718,7 +727,7 @@ export const GooglePlacesAutocomplete = forwardRef((props, ref) => {
     return false;
   };
 
-  const _onBlur = (e) => {
+  const _onBlur = e => {
     if (e && isNewFocusInAutocompleteResultList(e)) return;
 
     if (!props.keepResultsAfterBlur) {
@@ -740,14 +749,13 @@ export const GooglePlacesAutocomplete = forwardRef((props, ref) => {
           props.suppressDefaultStyles ? {} : defaultStyles.row,
           defaultStyles.poweredContainer,
           props.styles.poweredContainer,
-        ]}
-      >
+        ]}>
         <Image
           style={[
             props.suppressDefaultStyles ? {} : defaultStyles.powered,
             props.styles.powered,
           ]}
-          resizeMode='contain'
+          resizeMode="contain"
           source={require('./images/powered_by_google_on_white.png')}
         />
       </View>
@@ -785,71 +793,44 @@ export const GooglePlacesAutocomplete = forwardRef((props, ref) => {
     }
   };
 
-  const _getFlatList = () => {
-    const keyGenerator = () => Math.random().toString(36).substr(2, 10);
-
-    if (
-      supportedPlatform() &&
-      (stateText !== '' ||
-        props.predefinedPlaces.length > 0 ||
-        props.currentLocation === true) &&
-      listViewDisplayed === true
-    ) {
+  const _getFlatList = useCallback(() => {
+    if (stateText !== '' && listViewDisplayed === true) {
       return (
-        <FlatList
-          nativeID='result-list-id'
-          scrollEnabled={!props.disableScroll}
-          style={[
-            props.suppressDefaultStyles ? {} : defaultStyles.listView,
-            props.styles.listView,
-          ]}
-          data={dataSource}
-          keyExtractor={keyGenerator}
-          extraData={[dataSource, props]}
-          ItemSeparatorComponent={_renderSeparator}
-          renderItem={({ item, index }) => _renderRow(item, index)}
-          ListEmptyComponent={
-            listLoaderDisplayed
-              ? props.listLoaderComponent
-              : stateText.length > props.minLength && props.listEmptyComponent
-          }
-          ListHeaderComponent={
-            props.renderHeaderComponent &&
-            props.renderHeaderComponent(stateText)
-          }
-          ListFooterComponent={_renderPoweredLogo}
-          {...props}
-        />
+        <View style={{ zIndex: 0 }}>
+          {[...dataSource].slice(0, 5).map((item, index) => {
+            return _renderRow(item, index);
+          })}
+        </View>
       );
     }
 
     return null;
-  };
+  }, [dataSource]);
 
   let {
-    onFocus,
-    onBlur,
-    onChangeText, // destructuring here stops this being set after onChangeText={_handleChangeText}
-    clearButtonMode,
-    InputComp,
-    ...userProps
-  } = props.textInputProps;
+  onFocus = () => {},
+  onBlur = () => {},
+  onChangeText = () => {},
+  clearButtonMode,
+  InputComp,
+  ...userProps
+  } = props.textInputProps || {};
+
   const TextInputComp = InputComp || TextInput;
+
   return (
     <View
       style={[
         props.suppressDefaultStyles ? {} : defaultStyles.container,
         props.styles.container,
       ]}
-      pointerEvents='box-none'
-    >
+      pointerEvents="box-none">
       {!props.textInputHide && (
         <View
           style={[
             props.suppressDefaultStyles ? {} : defaultStyles.textInputContainer,
             props.styles.textInputContainer,
-          ]}
-        >
+          ]}>
           {_renderLeftButton()}
           <TextInputComp
             ref={inputRef}
@@ -861,7 +842,7 @@ export const GooglePlacesAutocomplete = forwardRef((props, ref) => {
             placeholder={props.placeholder}
             onFocus={
               onFocus
-                ? (e) => {
+                ? e => {
                     _onFocus();
                     onFocus(e);
                   }
@@ -869,7 +850,7 @@ export const GooglePlacesAutocomplete = forwardRef((props, ref) => {
             }
             onBlur={
               onBlur
-                ? (e) => {
+                ? e => {
                     _onBlur(e);
                     onBlur(e);
                   }
